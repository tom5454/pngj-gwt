plugins {
    id 'java-library'
    id 'maven-publish'
}

version = project.mod_version
group = 'com.tom5454.pngj-gwt' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'PNGJ-GWT'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenCentral()
    maven {
    	name = "tom5454 maven"
    	url = "https://raw.githubusercontent.com/tom5454/maven/main"
  	}
}

dependencies {
	implementation "com.google.elemental2:elemental2-core:1.1.0"
	implementation "com.google.elemental2:elemental2-dom:1.1.0"
	implementation 'org.slf4gwt:slf4gwt:1.4'
	implementation 'com.tom5454.jzlib-gwt:JZLib:1.1.3'
	
	testImplementation 'junit:junit:4.12'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "tom5454",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "tom5454",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
    // Include all main sources (compiled and source files)
    from sourceSets.main.allJava
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy jar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
		def mavenURL = System.getProperty("mavenDir")
		if ("${mavenURL}" != "null") {
			maven {
				url = file(mavenURL)
			}
		}
	}
}